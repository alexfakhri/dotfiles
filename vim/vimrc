call plug#begin('~/.vim/plugged')

" Syntax
Plug 'tpope/vim-git'
Plug 'vim-ruby/vim-ruby'
Plug 'jelera/vim-javascript-syntax'
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript'
Plug 'othree/html5.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'rust-lang/rust.vim'
Plug 'tpope/vim-haml' " haml also does Sass and SCSS
Plug 'chrisbra/csv.vim'
Plug 'leshill/vim-json'
Plug 'tpope/vim-markdown'
Plug 'andersoncustodio/vim-tmux'
Plug 'mxw/vim-jsx'

" Colour
Plug 'chriskempson/base16-vim'
Plug 'bling/vim-airline'

" Actual Plugs
Plug 'tpope/vim-endwise'                                           " Adds ends helpfully
Plug 'tpope/vim-surround'                                          " Change/remove surrounding things
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' } " Fuzzy finding
Plug 'christoomey/vim-tmux-navigator'                              " Navigation across vim and tmux splits
Plug 'tpope/vim-eunuch'                                            " Vim wrappers for file changing
Plug 'editorconfig/editorconfig-vim'                               " Apply .editorconfig
Plug 'tpope/vim-commentary'                                        " Commenting out things
Plug 'tpope/vim-fugitive'                                          " Git things
Plug 'kana/vim-textobj-user'                                       " Helps with defining custom text blocks
Plug 'nelstrom/vim-textobj-rubyblock'                              " Binds 'ar' to around a Ruby block, 'ir' to inside
Plug 'wellle/targets.vim'                                          " More text objects
Plug 'ahw/vim-pbcopy'                                              " Sends stuff to OS X clipboard via 'cy'
Plug 'AndrewRadev/splitjoin.vim'                                   " Split (gS) and join (gJ) blocks
Plug 'tpope/vim-rails'                                             " Rails craziness
Plug 'jlanzarotta/bufexplorer'                                     " Buffer Explorer
Plug 'kien/rainbow_parentheses.vim'                                " Colour matching parens nicely
Plug 'tmux-plugins/vim-tmux-focus-events'                          " Make vim listen to tmux focus events
Plug 'junegunn/vim-easy-align'                                     " Align things incredibly

call plug#end()

filetype plugin indent on

" Make the % key more powerful
runtime macros/matchit.vim

" status bar
set laststatus=2                        " Always show a statusline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_section_warning = ''
let g:airline#extensions#tabline#enabled = 0

" Assume all .js use JSX
let g:jsx_ext_required = 0

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" Auto-read files when switching back into vim
set autoread

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=500 ttimeoutlen=100

" fold with space, but don't autofold when opening
set foldmethod=indent
set foldlevelstart=999
nnoremap <Space> za

" Use jj for getting out of insert mode
inoremap jj <esc>

set history=100

set textwidth=90
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent

" Only do case-sensitive searches when search includes an uppercase letter
set ignorecase smartcase

set spelllang=en_gb
syntax spell toplevel

autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0

" ruby syntax highlighting is slower with the newer engine
autocmd FileType ruby setlocal regexpengine=1

set linebreak

set incsearch
set hlsearch

set scrolloff=10

set nobackup
set nowritebackup
set noswapfile

set backspace=indent,eol,start

set wildmode=full
set wildmenu
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux

let mapleader=","
noremap \ ,

set number
set relativenumber

" pretty colours
set background=dark
colorscheme base16-flat

set colorcolumn=90

set list listchars=tab:»·,trail:·

command! Q q

set splitbelow
set splitright

set tags=./.tags;

set lazyredraw

" ~~~ MAPPINGS BELOW ~~~

"gtfo ex mode
map Q <Nop>

map <Leader>nf :e <C-R>=expand("%:p:h") . "/" <CR>

map <leader>t :FZF!<cr>   " ,t for FZF
map <leader>v :vsplit<CR> " ,v for vsplit
map <leader>s :split<CR>  " ,s for split

vnoremap . :norm.<CR>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

nnoremap <CR> :noh<CR><CR>

" http://robots.thoughtbot.com/faster-grepping-in-vim/
set grepprg=ag\ --nogroup\ --nocolor

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

noremap H ^
noremap L $
vnoremap L g_

" Uppercase word mapping.
"
" This mapping allows you to press <c-u> in insert mode to convert the current
" word to uppercase.  It's handy when you're writing names of constants and
" don't want to use Capslock.
"
" To use it you type the name of the constant in lowercase.  While your
" cursor is at the end of the word, press <c-u> to uppercase it, and then
" continue happily on your way:
inoremap <C-u> <esc>mzgUiw`za
