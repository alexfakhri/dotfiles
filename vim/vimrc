call plug#begin('~/.vim/plugged')

" Syntax
Plug 'tpope/vim-git'
Plug 'vim-ruby/vim-ruby'
Plug 'jelera/vim-javascript-syntax'
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript'
Plug 'othree/html5.vim'
" haml also does Sass and SCSS

Plugin 'tpope/vim-haml'
Plugin 'chrisbra/csv.vim'
Plugin 'leshill/vim-json'
Plugin 'tpope/vim-markdown'
Plugin 'andersoncustodio/vim-tmux'
Plugin '1995eaton/vim-better-css-completion'
Plugin '1995eaton/vim-better-javascript-completion'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'tpope/vim-cucumber'
Plugin 'mxw/vim-jsx'

" Colour
Plugin 'flazz/vim-colorschemes'
Plugin 'john2x/flatui.vim'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'bling/vim-airline'

" Actual Plugins
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-surround'
Plugin 'kien/ctrlp.vim'
Plugin 'SirVer/ultisnips'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-rbenv'
Plugin 'tpope/vim-eunuch'
Plugin 'thoughtbot/vim-rspec'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'jackfranklin/vim-markdown-writer'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'xolox/vim-misc'
Plugin 'ervandew/supertab'
Plugin 'benmills/vimux'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-fugitive'
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'mattn/emmet-vim'
Plugin 'ahw/vim-pbcopy'
Plugin 'wellle/tmux-complete.vim'
Plugin 'tpope/vim-ragtag'
Plugin 'tommcdo/vim-exchange'
Plugin 'AndrewRadev/switch.vim'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'tpope/vim-rails'
Plugin 'wellle/targets.vim'
Plugin 'chrisbra/NrrwRgn'

" Buffer Explorer
Plugin 'jlanzarotta/bufexplorer'

" Enable file type detection. Do this after Vundle calls.
call vundle#end()

filetype plugin indent on


runtime macros/matchit.vim

" status bar
set laststatus=2                                                               " Always show a statusline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_section_warning = ''

let g:airline#extensions#tabline#enabled = 1

"make vim-rspec play nice with tslime
let g:rspec_command = 'call VimuxRunCommand("clear; rspec {spec}")'
>>>>>>> Vim config changes

" vim test config
let g:test#strategy = 'dispatch'

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

set autoread

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=500 ttimeoutlen=100

set nofoldenable

set history=10000

set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

set ignorecase smartcase

set spelllang=en_gb
syntax spell toplevel

autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0

" ruby syntax highlighting is slower with the newer engine
autocmd FileType ruby setlocal regexpengine=1

set laststatus=2

set linebreak

set incsearch
set hlsearch

set scrolloff=10

set nobackup
set nowritebackup
set noswapfile


set backspace=indent,eol,start

set wildmode=full
set wildmenu

let mapleader=","
noremap \ ,

set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux

set number
" set relativenumber

" pretty colours
set background=light
colorscheme Tomorrow-Night-Eighties

colorscheme solarized

set colorcolumn=80

set list listchars=tab:»·,trail:·

command! Q q

set splitbelow
set splitright

set tags=./.tags;

set lazyredraw

" ~~~ MAPPINGS BELOW ~~~

"gtfo ex mode
map Q <Nop>

" vim test
nmap <silent> <leader>n :TestNearest<CR>
nmap <silent> <leader>e :TestFile<CR>
nmap <silent> <leader>l :TestLast<CR>

map <leader>cf :CtrlPClearCache<cr>
nnoremap <leader>vs :vsplit $MYVIMRC<cr>
map <leader>gf :e Gemfile<cr>
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>
nnoremap <leader>mt :call MW_MakeTwitterReferenceLink()<CR>
nnoremap <leader>mfi :call MW_ConvertFencedToIndent()<CR>
nnoremap <leader>my :call MW_YamlFrontMatter()<CR>
nnoremap <leader>ml :call MW_MakeWordLink()<CR>
map <Leader>nf :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>sc :setlocal spell!<CR>

map <leader>t :CtrlP<cr>
map <leader>v :vsplit<CR>
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

" map saving and tabs to Control-"
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>

vnoremap . :norm.<CR>

let g:ctrlp_map = ''
let g:ctrlp_clear_cache_on_exit = 1

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]

nnoremap <CR> :noh<CR><CR>

" http://robots.thoughtbot.com/faster-grepping-in-vim/
set grepprg=ag\ --nogroup\ --nocolor

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

noremap H ^
noremap L $
vnoremap L g_

" Uppercase word mapping.
"
" This mapping allows you to press <c-u> in insert mode to convert the current
" word to uppercase.  It's handy when you're writing names of constants and
" don't want to use Capslock.
"
" To use it you type the name of the constant in lowercase.  While your
" cursor is at the end of the word, press <c-u> to uppercase it, and then
" continue happily on your way:
inoremap <C-u> <esc>mzgUiw`za

" Stolen from Max
" Use system clipboard
set clipboard="+
